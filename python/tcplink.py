def base_cl_options(override_arg_parse=None, add_help=True,
                    add_log_args=False, add_reset_arg=False):
    import argparse
    if override_arg_parse:
        parserclass = override_arg_parse
    else:
        parserclass = argparse.ArgumentParser
    parser = parserclass(
        description="Swift Navigation SBP Client version ", add_help=add_help)
    parser.add_argument(
        "-p", "--port", default=None, help="specify the serial port to use.")
    parser.add_argument(
        "-b",
        "--baud",
        default=SERIAL_BAUD,
        help="specify the baud rate to use.")
    parser.add_argument(
        "--rtscts",
        default=False,
        action="store_true",
        help="Enable Hardware Flow Control (RTS/CTS).")
    parser.add_argument(
        "-t",
        "--tcp",
        action="store_true",
        default=False,
        help="Use a TCP connection instead of a local serial port. \
                      If TCP is selected, the port is interpreted as host:port"
    )
    parser.add_argument(
        "-f",
        "--ftdi",
        action="store_true",
        help="use pylibftdi instead of pyserial.")
    parser.add_argument(
        "--file",
        help="Read with a filedriver rather than pyserial.",
        action="store_true")
    parser.add_argument(
        '--json',
        action="store_true",
        help="Input is SBP JSON")
    parser.add_argument(
        '--playback',
        action="store_true",
        help="Emulate real input")
    parser.add_argument(
        "-v",
        "--verbose",
        action="store_true",
        help="print extra debugging information.")
    if add_reset_arg:
        parser.add_argument(
            "-r",
            "--reset",
            action="store_true",
            help="reset device after connection.")
    if add_log_args:
        parser.add_argument(
            "-l",
            "--log",
            action="store_true",
            help="serialize SBP messages to autogenerated log file.")
        parser.add_argument(
            "-o",
            "--log-dirname",
            default='',
            help="directory in which to create logfile.")
        parser.add_argument(
            "--logfilename",
            default='',
            help='filename to use for log. Default filename with date and timestamp is used otherwise.'
        )
        parser.add_argument(
            '--expand-json',
            action="store_true",
            default=False,
            help="Expand fields in JSON logs"
        )
        parser.add_argument(
            "--skip-metadata",
            action="store_true",
            help="Omit metadata from JSON logs.")
        parser.add_argument(
            "--sort-keys",
            action="store_true",
            help="Sort JSON log elements by keys.")
        parser.add_argument(
            "--sender-id-filter",
            default=None,
            help="comma separated List of base10 sender_ids: e.g: 4096,0")
    return parser

