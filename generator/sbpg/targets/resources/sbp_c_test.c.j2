/*
 * Copyright (C) 2015-2018 Swift Navigation Inc.
 * Contact: https://support.swiftnav.com
 *
 * This source is subject to the license found in the file 'LICENSE' which must
 * be be distributed together with this source. All other rights reserved.
 *
 * THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND,
 * EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR PURPOSE.
 */

// This file was auto-generated from (((s.src_filename))) by generate.py. Do not modify by hand!

#include <check.h>
#include <stdio.h> // for debugging
#include <stdlib.h> // for malloc
#include <sbp.h>
#include <(((include))).h>

static struct {
  u32 n_callbacks_logged;
  u16 sender_id;
  u8 len;
  u8 payload[SBP_MAX_PAYLOAD_LEN];
  void *context;
} last_payload;

static struct {
  u32 n_callbacks_logged;
  u16 sender_id;
  u16 msg_type;
  u8 payload_len;
  u8 payload[SBP_MAX_PAYLOAD_LEN];
  u16 frame_len;
  u8 frame[SBP_MAX_FRAME_LEN];
  void *context;
} last_frame;

static struct {
  u32 n_callbacks_logged;
  u16 sender_id;
  u16 msg_type;
  sbp_msg_t msg;
  void *context;
} last_unpacked;

static u32 dummy_wr = 0;
static u32 dummy_rd = 0;
static u8 dummy_buff[1024];
static void* last_io_context;

static int DUMMY_MEMORY_FOR_CALLBACKS = 0xdeadbeef;
static int DUMMY_MEMORY_FOR_IO = 0xdead0000;

static void dummy_reset()
{
  dummy_rd = dummy_wr = 0;
  memset(dummy_buff, 0, sizeof(dummy_buff));
}

static s32 dummy_write(u8 *buff, u32 n, void* context)
{
 last_io_context = context;
 u32 real_n = n;//(dummy_n > n) ? n : dummy_n;
 memcpy(dummy_buff + dummy_wr, buff, real_n);
 dummy_wr += real_n;
 return real_n;
}

static s32 dummy_read(u8 *buff, u32 n, void* context)
{
 last_io_context = context;
 u32 real_n = n;//(dummy_n > n) ? n : dummy_n;
 memcpy(buff, dummy_buff + dummy_rd, real_n);
 dummy_rd += real_n;
 return real_n;
}

static void logging_reset()
{
  memset(&last_payload, 0, sizeof(last_payload));
  memset(&last_frame, 0, sizeof(last_frame));
  memset(&last_unpacked, 0, sizeof(last_unpacked));
}

static void payload_callback(u16 sender_id, u8 len, u8 msg[], void* context)
{
  last_payload.n_callbacks_logged++;
  last_payload.sender_id = sender_id;
  last_payload.len = len;
  last_payload.context = context;
  memcpy(last_payload.payload, msg, len);

  /*printy_callback(sender_id, len, msg);*/
}

static void frame_callback(u16 sender_id, u16 msg_type, u8 payload_len, u8 payload[], u16 frame_len, u8 frame[], void *context)
{
  last_frame.n_callbacks_logged++;
  last_frame.sender_id = sender_id;
  last_frame.msg_type = msg_type;
  last_frame.payload_len = payload_len;
  memcpy(last_frame.payload, payload, payload_len);
  last_frame.frame_len = frame_len;
  memcpy(last_frame.frame, frame, frame_len);
  last_frame.context = context;
}

static void unpacked_callback(u16 sender_id, u16 msg_type, const sbp_msg_t *msg, void *context)
{
  last_unpacked.n_callbacks_logged++;
  last_unpacked.sender_id = sender_id;
  last_unpacked.msg_type = msg_type;
  memcpy(&last_unpacked.msg, msg, sizeof(*msg));
  last_unpacked.context = context;
}

START_TEST( test_(((s.suite_name))) )
{
  static sbp_msg_callbacks_node_t n;
  static sbp_msg_callbacks_node_t n2;
  static sbp_msg_callbacks_node_t n3;

  // State of the SBP message parser.
  // Must be statically allocated.
  sbp_state_t sbp_state;

  //
  // Run tests:
  //

    ((*- macro compare_value(prefix, value) *))
    ((*- if value is string_type *))
    {
      char check_string[] = { (((value|str_escape))) };
      ck_assert_msg(memcmp(check_msg->(((prefix))), check_string, sizeof(check_string)) == 0, "incorrect value for check_msg->(((prefix))), expected string '%s', is '%s'", (((value|str_escape))), check_msg->(((prefix))));
    }
    ((*- elif value is array_type *))
    ((*- for ff in value *))((( compare_value( (((prefix))) + '[' + (((loop.index0|to_str))) + ']', (((ff))) ) )))((*- endfor *))
    ((*- elif value is dict_type *))
    ((*- for k in (((value|sorted))) *))((( compare_value( (((prefix))) + '.' + (((k))), (((value[k]))) ) )))((*- endfor *))
    ((*- elif value is float_type *))((=
        Note: the ("%.12g"|format(value)|float) filter is intended to keep float
        literal precision unchanged whether generated under Python 2.7 or 3.x. =))
    ck_assert_msg((check_msg->(((prefix)))*100 - ((("%.12g"|format(value)|float)))*100) < 0.05, "incorrect value for (((prefix))), expected ((("%.12g"|format(value)|float))), is %f", check_msg->(((prefix))));
    ((*- else *))
    ck_assert_msg(check_msg->(((prefix))) == (((value))), "incorrect value for (((prefix))), expected (((value))), is %d", check_msg->(((prefix))));
    ((*- endif *))
    ((*- endmacro *))

    ((*- macro assign_value(prefix, value) *))
    ((*- if value is string_type *))
    {
      char test_string[] = { (((value|str_escape))) };
      memcpy(test_msg->(((prefix))), test_string, sizeof(test_string));
    }
    ((*- elif value is array_type *))
    test_msg->n_(((prefix))) = 0;
    ((*- for ff in value *))test_msg->n_(((prefix)))++; (((assign_value( (((prefix))) + '[' + (((loop.index0|to_str))) + ']', (((ff))) ) )))((*- endfor *))
    ((*- elif value is dict_type *))
    ((*- for k in (((value|sorted))) *))((( assign_value( (((prefix))) + '.' + (((k))), (((value[k]))) ) )))((*- endfor *))
    ((*- elif value is float_type *))
    test_msg->(((prefix))) = (((value)));
    ((*- else *))
    test_msg->(((prefix))) = (((value)));
    ((*- endif *))
    ((*- endmacro *))

  ((*- for t in s.tests *))
  // Test successful parsing of a message
  {
    // SBP parser state must be initialized before sbp_process is called.
    // We re-initialize before every test so that callbacks for the same message types can be
    //  allocated multiple times across different tests.
    sbp_state_init(&sbp_state);

    sbp_state_set_io_context(&sbp_state, &DUMMY_MEMORY_FOR_IO);

    logging_reset();

    sbp_register_callback(&sbp_state, (((t.msg_type))), &payload_callback, &DUMMY_MEMORY_FOR_CALLBACKS, &n);
    sbp_register_frame_callback(&sbp_state, (((t.msg_type))), &frame_callback, &DUMMY_MEMORY_FOR_CALLBACKS, &n2);
    sbp_register_unpacked_callback(&sbp_state, (((t.msg_type))), &unpacked_callback, &DUMMY_MEMORY_FOR_CALLBACKS, &n3);

    u8 test_encoded_frame_data[] = { ((*- for p in t.packet_as_byte_array *))(((p))),((*- endfor *)) };
    u8 test_encoded_payload_data[] = { ((*- for p in t.packet_as_byte_array[6:-2] *))(((p))),((*- endfor *)) };

    sbp_msg_t test_msg_storage;
    memset(&test_msg_storage, 0, sizeof(test_msg_storage));
    ((*- if t.fields *))
    (((t.msg_type_name|convert))) *test_msg = ( (((t.msg_type_name|convert))) *)&test_msg_storage;
    ((*- for f in t.fieldskeys *))(((assign_value( (((f))), (((t.fields[f]))) ))))((*- endfor *))
    ((*- endif *))

    dummy_reset();
    logging_reset();

    // Test sending an unpacked message
    sbp_send_message(&sbp_state, (((t.msg_type))), (((t.raw_json_obj.sender))), &test_msg_storage, &dummy_write);

    ck_assert_msg(memcmp(dummy_buff, test_encoded_frame_data, sizeof(test_encoded_frame_data)) == 0,
        "message not encoded properly");

    while (dummy_rd < dummy_wr) {
      ck_assert_msg(sbp_process(&sbp_state, &dummy_read) >= SBP_OK,
          "sbp_process threw an error!");
    }

    ck_assert_msg(last_payload.n_callbacks_logged == 1,
        "one payload callback should have been logged");
    ck_assert_msg(last_payload.sender_id == (((t.raw_json_obj.sender))),
        "sender_id decoded incorrectly");
    ck_assert_msg(last_payload.len == sizeof(test_encoded_payload_data),
        "len decoded incorrectly");
    ck_assert_msg(memcmp(last_payload.payload, test_encoded_payload_data, sizeof(test_encoded_payload_data))
          == 0,
        "test data decoded incorrectly");
    ck_assert_msg(last_payload.context == &DUMMY_MEMORY_FOR_CALLBACKS,
        "context pointer incorrectly passed");

    ck_assert_msg(last_frame.n_callbacks_logged == 1,
        "one frame callback should have been logged");
    ck_assert_msg(last_frame.sender_id == (((t.raw_json_obj.sender))),
        "sender_id decoded incorrectly");
    ck_assert_msg(last_frame.payload_len == sizeof(test_encoded_payload_data),
        "len decoded incorrectly");
    ck_assert_msg(memcmp(last_frame.payload, test_encoded_payload_data, sizeof(test_encoded_payload_data))
        == 0,
        "test data decoded incorrectly");
    ck_assert_msg(last_frame.frame_len == sizeof(test_encoded_frame_data),
        "frame len decoded incorrectly");
    ck_assert_msg(memcmp(last_frame.frame, test_encoded_frame_data, sizeof(test_encoded_frame_data))
        == 0,
        "frame data decoded incorrectly");

    ((*- if t.fields *))
    (((t.msg_type_name|convert))) *check_msg = ( (((t.msg_type_name|convert))) *)&last_unpacked.msg;
    // Run tests against fields
    ((*- for f in t.fieldskeys *))(((compare_value( (((f))), (((t.fields[f]))) ))))((*- endfor *))
    ((*- endif *))


    // Test again by sending an already encoded payload

    dummy_reset();
    logging_reset();

    sbp_send_packed_message(&sbp_state, (((t.msg_type))), (((t.raw_json_obj.sender))), sizeof(test_encoded_payload_data), test_encoded_payload_data, &dummy_write);

    ck_assert_msg(memcmp(dummy_buff, test_encoded_frame_data, sizeof(test_encoded_frame_data)) == 0,
        "message not encoded properly");

    while (dummy_rd < dummy_wr) {
      ck_assert_msg(sbp_process(&sbp_state, &dummy_read) >= SBP_OK,
          "sbp_process threw an error!");
    }

    ck_assert_msg(last_payload.n_callbacks_logged == 1,
        "one payload callback should have been logged");
    ck_assert_msg(last_payload.sender_id == (((t.raw_json_obj.sender))),
        "sender_id decoded incorrectly");
    ck_assert_msg(last_payload.len == sizeof(test_encoded_payload_data),
        "len decoded incorrectly");
    ck_assert_msg(memcmp(last_payload.payload, test_encoded_payload_data, sizeof(test_encoded_payload_data))
          == 0,
        "test data decoded incorrectly");
    ck_assert_msg(last_payload.context == &DUMMY_MEMORY_FOR_CALLBACKS,
        "context pointer incorrectly passed");

    ck_assert_msg(last_frame.n_callbacks_logged == 1,
        "one frame callback should have been logged");
    ck_assert_msg(last_frame.sender_id == (((t.raw_json_obj.sender))),
        "sender_id decoded incorrectly");
    ck_assert_msg(last_frame.payload_len == sizeof(test_encoded_payload_data),
        "len decoded incorrectly");
    ck_assert_msg(memcmp(last_frame.payload, test_encoded_payload_data, sizeof(test_encoded_payload_data))
        == 0,
        "test data decoded incorrectly");
    ck_assert_msg(last_frame.frame_len == sizeof(test_encoded_frame_data),
        "frame len decoded incorrectly");
    ck_assert_msg(memcmp(last_frame.frame, test_encoded_frame_data, sizeof(test_encoded_frame_data))
        == 0,
        "frame data decoded incorrectly");

    ((*- if t.fields *))
    // Run tests against fields
    ((*- for f in t.fieldskeys *))(((compare_value( (((f))), (((t.fields[f]))) ))))((*- endfor *))
    ((*- endif *))

  }
  ((*- endfor *))
}
END_TEST

Suite* (((s.suite_name)))_suite(void)
{
  Suite *s = suite_create("SBP generated test suite: (((s.suite_name)))");
  TCase *tc_acq = tcase_create("Automated_Suite_(((s.suite_name)))");
  tcase_add_test(tc_acq, test_(((s.suite_name))));
  suite_add_tcase(s, tc_acq);
  return s;
}
